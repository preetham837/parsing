{
  "x-generator": "NSwag v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Personal Information Parser API",
    "version": "v1"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "paths": {
    "/api/Parse": {
      "post": {
        "tags": [
          "Parse"
        ],
        "summary": "Parse personal information from text",
        "description": "Parse personal information from a sentence using AI, or lookup stored user data by ID.\r\n\r\n**How it works:**\r\n1. If you provide an `id` → returns stored person data (like 'jim-croce')\r\n2. If you provide `input_text` → AI extracts: Name, Street, City, State, Country, Phone Number, Zip Code\r\n\r\n**Example text input:** \r\n'My name is Jim Croce, I live in 2944 Monaco dr, Manchester, Colorado, USA, 92223. My phone number is 893-366-8888.'\r\n\r\n**Available IDs:** jim-croce, person-1, person-2, person-3",
        "operationId": "Parse",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParseRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParseResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Parse/id": {
      "post": {
        "tags": [
          "Parse"
        ],
        "summary": "Parse ID document information",
        "description": "Parse driver's license information from image, URL, or text fallback, or lookup stored ID data by ID.\r\n\r\n**How it works:**\r\n1. If you provide an `id` → returns stored ID data\r\n2. If you provide an image file → AI extracts driver's license information using GROQ vision (meta-llama/llama-4-scout-17b-16e-instruct)\r\n3. If you provide `image_url` → Downloads and processes the image \r\n4. If you provide `input_text` → Falls back to text parsing\r\n\r\n**Example usage:** Upload a driver's license image to extract structured information including name, address, document numbers, dates, and physical characteristics.",
        "operationId": "ParseId",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "nullable": true
                  },
                  "inputText": {
                    "type": "string",
                    "nullable": true
                  },
                  "imageUrl": {
                    "type": "string",
                    "nullable": true
                  },
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParseIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Todos": {
      "get": {
        "tags": [
          "Todos"
        ],
        "operationId": "GetTodos",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TodoItem"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Todos"
        ],
        "operationId": "CreateTodo",
        "requestBody": {
          "x-name": "command",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTodoCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/Todos/{id}": {
      "put": {
        "tags": [
          "Todos"
        ],
        "operationId": "UpdateTodo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "dto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTodoCommandDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Todos"
        ],
        "operationId": "DeleteTodo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ParseResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "source": {
            "type": "string",
            "description": "Source of the data"
          },
          "data": {
            "description": "Extracted personal information",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Person"
              }
            ]
          }
        }
      },
      "Person": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Full name of the person"
          },
          "street": {
            "type": "string",
            "description": "Street address"
          },
          "city": {
            "type": "string",
            "description": "City name"
          },
          "state": {
            "type": "string",
            "description": "State or province"
          },
          "country": {
            "type": "string",
            "description": "Country"
          },
          "zipCode": {
            "type": "string",
            "description": "ZIP or postal code"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number"
          }
        }
      },
      "ProblemDetails": {
        "type": "object",
        "additionalProperties": {
          "nullable": true
        },
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ParseRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "inputText": {
            "type": "string",
            "description": "Text containing personal information to parse using AI",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "ID to lookup stored person data",
            "nullable": true
          }
        }
      },
      "ParseIdResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "source": {
            "type": "string",
            "description": "Source of the data"
          },
          "data": {
            "description": "Extracted ID document information",
            "oneOf": [
              {
                "$ref": "#/components/schemas/IdParsed"
              }
            ]
          }
        }
      },
      "IdParsed": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fullName": {
            "type": "string",
            "description": "Full name as it appears on the ID"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth in yyyy-mm-dd format"
          },
          "address": {
            "description": "Address information from the ID",
            "oneOf": [
              {
                "$ref": "#/components/schemas/IdAddress"
              }
            ]
          },
          "documentNumber": {
            "type": "string",
            "description": "Driver's license or ID document number"
          },
          "expirationDate": {
            "type": "string",
            "description": "Expiration date in yyyy-mm-dd format"
          },
          "issueDate": {
            "type": "string",
            "description": "Issue date in yyyy-mm-dd format"
          },
          "licenseClass": {
            "type": "string",
            "description": "License class"
          },
          "endorsements": {
            "type": "string",
            "description": "License endorsements"
          },
          "restrictions": {
            "type": "string",
            "description": "License restrictions"
          },
          "sex": {
            "type": "string",
            "description": "Sex/Gender"
          },
          "eyeColor": {
            "type": "string",
            "description": "Eye color"
          },
          "height": {
            "type": "string",
            "description": "Height"
          },
          "detectedCountry": {
            "type": "string",
            "description": "Detected country from ID analysis"
          },
          "detectedState": {
            "type": "string",
            "description": "Detected state from ID analysis"
          },
          "barcodePresent": {
            "type": "boolean",
            "description": "Whether a barcode was detected on the ID"
          },
          "warnings": {
            "type": "array",
            "description": "Warning messages about data quality",
            "items": {
              "type": "string"
            }
          },
          "confidences": {
            "type": "object",
            "description": "Confidence scores for extracted fields",
            "additionalProperties": {
              "type": "number",
              "format": "float"
            }
          },
          "boxes": {
            "type": "object",
            "description": "Bounding boxes for detected fields",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "float"
              }
            }
          }
        }
      },
      "IdAddress": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "street": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          }
        }
      },
      "TodoItem": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "isComplete": {
            "type": "boolean"
          }
        }
      },
      "CreateTodoCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "title": {
            "type": "string"
          }
        }
      },
      "UpdateTodoCommandDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "title": {
            "type": "string"
          },
          "isComplete": {
            "type": "boolean"
          }
        }
      }
    }
  }
}